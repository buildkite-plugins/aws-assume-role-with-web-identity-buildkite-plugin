#!/bin/bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"

if [[ -z "${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_ARN:-}" ]]; then
  echo "ðŸš¨ Missing 'role-arn' plugin configuration"
  exit 1
fi

REQUEST_TOKEN_OPTIONAL_ARGS="${REQUEST_TOKEN_OPTIONAL_ARGS:-}"
ASSUME_ROLE_OPTIONAL_ARGS="${ASSUME_ROLE_OPTIONAL_ARGS:-}"
BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_SESSION_TAGS="${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_SESSION_TAGS:-}"

if [[ -n "${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_SESSION_DURATION:-}" ]]; then
  REQUEST_TOKEN_OPTIONAL_ARGS="${REQUEST_TOKEN_OPTIONAL_ARGS} --lifetime ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_SESSION_DURATION}"
  ASSUME_ROLE_OPTIONAL_ARGS="${ASSUME_ROLE_OPTIONAL_ARGS} --duration-seconds ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_SESSION_DURATION}"
fi

# If the user has provided a specific set of claims to include in the token as AWS session tags, we'll request them
#if [[ -n "${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_SESSION_TAGS}" ]]; then
#  REQUEST_TOKEN_OPTIONAL_ARGS="${ASSUME_ROLE_OPTIONAL_ARGS} --aws-session-tag ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_SESSION_TAGS}"
#fi
if plugin_read_list_into_result BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_SESSION_TAGS ; then
  claims=$(join_by "," "${result[@]}")
  REQUEST_TOKEN_OPTIONAL_ARGS="${REQUEST_TOKEN_OPTIONAL_ARGS} --aws-session-tag \"${claims}\""
  echo "************"
  echo $claims
  echo $REQUEST_TOKEN_OPTIONAL_ARGS
  echo "************"
fi

echo "================"
echo $REQUEST_TOKEN_OPTIONAL_ARGS
echo "================"

echo "~~~ :buildkite::key::aws: Requesting an OIDC token for AWS from Buildkite"

REQUEST_TOKEN_CMD="buildkite-agent oidc request-token --audience sts.amazonaws.com"

if [[ -n "${REQUEST_TOKEN_OPTIONAL_ARGS:-}" ]]; then
  REQUEST_TOKEN_CMD="${REQUEST_TOKEN_CMD} ${REQUEST_TOKEN_OPTIONAL_ARGS}"
fi

echo "^^^^^^^^^^^^^^^^^^^^^^^"
echo "${REQUEST_TOKEN_CMD}"
echo "^^^^^^^^^^^^^^^^^^^^^^^"

BUILDKITE_OIDC_TOKEN="$(eval "${REQUEST_TOKEN_CMD}")"

echo "~~~ :aws: Assuming role using OIDC token"
echo "Role ARN: ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_ARN}"

ASSUME_ROLE_CMD="aws sts assume-role-with-web-identity --role-arn ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_ARN} --role-session-name ${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_ROLE_SESSION_NAME:-buildkite-job-${BUILDKITE_JOB_ID}} --web-identity-token ${BUILDKITE_OIDC_TOKEN}"

if [[ -n "${ASSUME_ROLE_OPTIONAL_ARGS}" ]]; then
  ASSUME_ROLE_CMD="${ASSUME_ROLE_CMD} ${ASSUME_ROLE_OPTIONAL_ARGS}"
fi

ASSUME_ROLE_RESPONSE=$(eval "${ASSUME_ROLE_CMD}")
ASSUME_ROLE_CMD_STATUS=$?

if [[ ${ASSUME_ROLE_CMD_STATUS} -ne 0 ]]; then
  echo "^^^ +++"
  echo "Failed to assume AWS role:"
  echo "${ASSUME_ROLE_RESPONSE}"
  exit 1
fi

AWS_ACCESS_KEY_ID="$(jq -r ".Credentials.AccessKeyId" <<< "${ASSUME_ROLE_RESPONSE}")"
AWS_SECRET_ACCESS_KEY="$(jq -r ".Credentials.SecretAccessKey" <<< "${ASSUME_ROLE_RESPONSE}")"
AWS_SESSION_TOKEN="$(jq -r ".Credentials.SessionToken" <<< "${ASSUME_ROLE_RESPONSE}")"
export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export AWS_SESSION_TOKEN

echo "Assumed role: $(jq -r .AssumedRoleUser.AssumedRoleId <<< "${ASSUME_ROLE_RESPONSE}")"

if [[ -n "${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_REGION:-}" ]]; then
  export AWS_DEFAULT_REGION="${BUILDKITE_PLUGIN_AWS_ASSUME_ROLE_WITH_WEB_IDENTITY_REGION}"
  export AWS_REGION="${AWS_DEFAULT_REGION}"
  echo "Using region: ${AWS_REGION}"
fi
